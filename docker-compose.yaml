x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.7.1}
  build:
    context: .
    dockerfile: airflow/Dockerfile
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    PYTHONPATH: "/opt/airflow:/opt/airflow/dags"
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/src:/opt/airflow/src
    - ./data:/opt/airflow/data
    - ./models:/opt/airflow/models
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    container_name: airflow_postgres
    networks:
      - airflow-network
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./postgres-config:/etc/postgresql/
    command: >
      postgres
      -c listen_addresses='*'
      -c max_connections=100
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    networks:
      - airflow-network
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - postgres

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command: >
      -c "pip install -r requirements.txt &&
          airflow db init &&
          airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com"
    restart: "no"

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    networks:
      - airflow-network
    command: webserver
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    environment:
      <<: *airflow-common-env
      MLFLOW_TRACKING_URI: http://mlflow:5000
    depends_on:
      - mlflow
      - postgres

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    networks:
      - airflow-network
    command: scheduler
    restart: always
    environment:
      <<: *airflow-common-env
      MLFLOW_TRACKING_URI: http://mlflow:5000
    depends_on:
      - mlflow
      - postgres

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.3.1
    container_name: mlflow_server
    ports:
      - "5000:5000"
    command: mlflow server --host 0.0.0.0
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./mlruns:/mlruns
    networks:
      - airflow-network
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres-db-volume:

networks:
  airflow-network:
    driver: bridge